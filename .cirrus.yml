env: # Environment variables to pass to all tasks
    CIRRUS_CLONE_DEPTH: 1 # No need to clone with the whole history
    CIRRUS_WORKING_DIR: "/tmp/ci" # Where to clone the aosp-builder repo

    # For rclone with google drive or any cloud! After first commit pushing, login to https://cirrus-ci.com , click top left corner 3 dot menu, click repository(yourname/aosp-builder) > Repository Settings > Secured Variables > enter content of ~/.config/rclone/rclone.conf (from pc where you setup rclone) > ENCRYPT, copy that ENCRYPTED hash
    # ENCRYPTED variables is unique for every repository, so you cant use my one, create you rclone config https://rclone.org/drive/#making-your-own-client-id
    rclone_config: "ENCRYPTED[6d6f691048461afdbe599559b051756a225cb7b94f508c5ce1153fcbc5ae33429b2783f907b5452f2d8d5985f73ca3f3]"
    API_BOT: "ENCRYPTED[6eb4000ec38ab89044b830d7f49b90df16039a59e3bb872edb4c704c4b32e95e1867dd0ac3ea879ea187045f7e180b8a]"
    CHATID: "ENCRYPTED[6391f364f7b866966aef339b673e7ee62b1b568b8b340d2f8de3b09a28ccf461342365e58fae697116c2a2f8a3eb1832]"
    
task:
    name: legionos # Project name
    timeout_in: 120m # Otherwise it will timeout at 60m automatically, 120m highest in free account
    container:
      image: rajkale99/legiondir:latest # It has built-in setup environment + repo, aria2, rclone, pigz, username ci, and email ci@ci.ci [You can use your own docker image if you want, or you can use this one too!]
      cpu: 8  #8 or less cpu for dummy build, 8 cpu for the final build, 8cpu highest for free accounts. Don't try to use more than 8cpu as free user, you may get blocked by ci.
      memory: 32G # So that we can have ram when needed, 32G highest
    download_ccache_background_script: # To download ccache in background
      - ./download_ccache # Ccache download script
    sync_script: # To sync source
      - ./sync # Source sync script
    monitor_background_script: # To monitor ccache and machine status every minute, runs in background
      - ./monitor # Monitor script
    build_script: # Actual build script foreground
      - ./build # Build script to run
    upload_ccache_script: # Upload ccache to cloud foreground
      - ./upload_ccache # Ccache uploading script
